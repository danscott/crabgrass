= Crabgrass Mods

This is documentation specific to Crabgras Mods.

* Controllers & Helpers: See Engines::RailsExtensions::Dependencies for more information.

* Views: now handled almost entirely by ActionView itself (see Engines::Plugin#add_plugin_view_paths for more information)

* Models: this is tricky, see below.

See http://api.rails-engines.org

== Overriding Views in a Mod

If this is in the init.rb of your plugin:

  self.override_views = true

Then any view file in the plugin's app/views folder will override what
is in the main application. Otherwise, the views in the main
application take precedence. If <tt>load_once</tt> is set to false, then you
can make changes to your mod in development mod and see those changes
reflected in the application without needing to restart script/server.

== View Listeners

Suppose the main application had this in a view:

  <%= call_hook :menu, :some_variable => true %>

You can create a listener for this hook in your plugin. When this hook
is called, all the listeners for that hook are called and their output
returned.

In your plugin's init.rb:

  Dispatcher.to_prepare do
    require 'my_listener'
  end

In your plugin's lib/my_listener.rb

  class MyListener < Crabgrass::Hook::ViewListener
    include Singleton

    def menu(context)
      'hi' if context[:some_variable] == true
    end
  end

In this case, the 'call_hook' command will return 'hi'.

In your ViewListener, you can use any method that is available to a
view.

== Modifying Models in the Plugin

Some plugins have a problem: if a plugin applies a mixing directly to
a model in app/models, this mixin gets unloaded by rails after the
first request. This only happens in development mode. The symptom is
an application that works for the first request but fails on
subsiquent requests.

Normal plugins don't have this problem: they modify active record, and
then the core models call these extensions which triggers the
reloading of the plugin mixin.

To get around this problem, crabgrass has a method called
apply_mixin_to_model that is available in the plugin's init.rb. 

(1) in your plugin's init.rb:

  # in this example, there is a model app/models/language.rb, and module
  # vendor/plugins/myplugin/app/models/language_extension.rb

  apply_mixin_to_model(Language, LanguageExtension)

(2) define a module that will be used to extend the model:

  module LanguageExtension
    module InstanceMethods
      def percent_complete()
        count = Key.count_all
        if count > 0
          (Key.translated(self).count / count * 100.0).round.to_s + '%'
        end
      end
    end
   
    module ClassMethods
      def hello
         'i am a class method'
      end
    end

    def self.add_to_class_definition
      lambda do
        has_many :translations, :dependent => :destroy
      end
    end
  end

Some further reading....

Plugins loaded first problem:

* http://weblog.techno-weenie.net/2007/1/24/understanding-the-rails-initialization-process

Plugin classes unloaded after first refresh in development mode:

* http://weblog.techno-weenie.net/2007/1/26/understanding-the-rails-plugin-initialization-process
* http://rails-engines.org/development/common-issues-when-overloading-code-from-plugins/
* http://blog.nanorails.com/articles/2007/2/15/after_method
* http://www.ruby-forum.com/topic/111410

Reloading changed code problem:

* http://cameronyule.com/2008/07/make-rails-engines-2-reload-in-development-mode
* crabgrass has its own method. see lib/extends_to_engines.rb

== Customizing the stylesheets and favicon from a plugin

Define LayoutHelper for your module and then define mods_styles and
favicon_link.

For example, <tt>mods/mymod/app/helpers/layout_helper.rb</tt>:

  module LayoutHelper
    def mod_styles
      stylesheet_link_tag('theme', :plugin => 'mymod')
    end
    def favicon_link
      '<link rel="shortcut icon" href="/plugin_assets/mymod/favicon.ico" type="image/x-icon" /><link rel="icon" href="/plugin_assets/mymod/favicon.png" type="image/x-icon" />]'
    end
  end

